name: Comment to Commit using Aider

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  generate:
    if: ${{ contains(github.event.comment.body, '@aider') }}
    uses: oscoreio/ai-workflows/.github/workflows/comment-to-commit-using-aider.yml@main
    with:
      comment-id: ${{ github.event.comment.id }}
      pr-url: ${{ github.event.issue.pull_request.url || github.event.pull_request.url }}
      is-review: ${{ github.event_name == 'pull_request_review_comment' }}
    secrets:
      # You need set one of these keys
      openrouter-api-key: ${{ secrets.OPENROUTER_API_KEY }} # while it allows to use DeepSeek R1 for free, it still required to rate-limiting you
      openai-api-key: ${{ secrets.OPENAI_API_KEY }}
      anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
      groq-api-key: ${{ secrets.GROQ_API_KEY }}
      gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
      cohere-api-key: ${{ secrets.COHERE_API_KEY }}
      deepseek-api-key: ${{ secrets.DEEPSEEK_API_KEY }}

  revert-last-commit:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.comment.body, 'revert last commit') }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          # Check out the branch: use GITHUB_HEAD_REF if available (PR context),
          # otherwise fall back to GITHUB_REF.
          ref: ${{ github.head_ref || github.ref }}
      
      - name: Set up Git user configuration
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      
      - name: Revert last commit
        run: |
          LAST_COMMIT=$(git rev-parse HEAD)
          echo "Reverting commit: $LAST_COMMIT"
          git revert --no-edit $LAST_COMMIT
      
      - name: Determine branch name
        id: branch
        run: |
          # If running in a PR, GITHUB_HEAD_REF should be set.
          if [ -n "$GITHUB_HEAD_REF" ]; then
            echo "Using GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
            echo "::set-output name=branch::$GITHUB_HEAD_REF"
          else
            # Try to extract the branch from the event payload (for issue_comment events on PRs)
            BRANCH=$(jq -r '.pull_request.head.ref // .issue.pull_request.head.ref' "$GITHUB_EVENT_PATH")
            if [ "$BRANCH" = "null" ] || [ -z "$BRANCH" ]; then
              # Fallback: remove 'refs/heads/' from GITHUB_REF
              BRANCH="${GITHUB_REF#refs/heads/}"
            fi
            echo "Determined branch: $BRANCH"
            echo "::set-output name=branch::$BRANCH"
          fi
        shell: bash
      
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_BRANCH="${{ steps.branch.outputs.branch }}"
          echo "Pushing changes to branch: $TARGET_BRANCH"
          git push origin HEAD:"$TARGET_BRANCH"
